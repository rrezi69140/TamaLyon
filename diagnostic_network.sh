#!/bin/bash

echo "üîç === TEST DE DIAGNOSTIC R√âSEAU ==="
echo "===================================="
echo ""

# Aller dans le r√©pertoire principal
cd "$(dirname "$0")"

echo "üìÅ R√©pertoire: $(pwd)"
echo ""

# Compiler le projet principal
echo "üî® Compilation du projet principal..."
make clean && make

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur de compilation"
    exit 1
fi

echo ""
echo "üöÄ DIAGNOSTIC AUTOMATIS√â"
echo "========================"

# Fonction pour tuer les processus TamaLyon
cleanup() {
    echo "üßπ Nettoyage des processus..."
    pkill -f TamaLyon 2>/dev/null
    sleep 1
}

# Nettoyer au d√©but
cleanup

# Fonction pour lancer TamaLyon en arri√®re-plan avec logs
launch_tamalyon() {
    local mode=$1
    local logfile=$2
    echo "üöÄ Lancement TamaLyon en mode $mode..."
    
    # Lancer avec logs d√©taill√©s et capture dans un fichier
    QT_LOGGING_RULES="*=true" ./TamaLyon.app/Contents/MacOS/TamaLyon > "$logfile" 2>&1 &
    local pid=$!
    echo "üìã PID: $pid"
    
    # Attendre que l'application soit pr√™te
    sleep 2
    
    return $pid
}

# Fonction pour simuler les actions dans TamaLyon
simulate_actions() {
    local mode=$1
    local delay=$2
    
    echo "‚è±Ô∏è  Attente de ${delay}s pour $mode..."
    sleep $delay
    
    if [ "$mode" = "HOST" ]; then
        echo "üè† Simulation: Host d√©marre le serveur"
        # Dans un vrai test, on pourrait utiliser des outils comme xdotool ou AppleScript
        # Pour l'instant, on simule avec des logs
        echo "[SIMULATION] Host clique sur 'H√©berger'"
        
    elif [ "$mode" = "CLIENT" ]; then
        echo "üîó Simulation: Client se connecte"
        echo "[SIMULATION] Client clique sur 'Rejoindre'"
        sleep 2
        echo "üçé Simulation: Client fait glisser une pomme"
        echo "[SIMULATION] Client drag & drop aliment index 0"
    fi
}

# Cr√©er les fichiers de log
HOST_LOG="diagnostic_host.log"
CLIENT_LOG="diagnostic_client.log"

# Lancer l'h√¥te
echo "1Ô∏è‚É£  √âTAPE 1: Lancement de l'h√¥te"
launch_tamalyon "HOST" "$HOST_LOG"
HOST_PID=$!

# Attendre un peu
sleep 3

# Lancer le client
echo ""
echo "2Ô∏è‚É£  √âTAPE 2: Lancement du client"
launch_tamalyon "CLIENT" "$CLIENT_LOG"
CLIENT_PID=$!

# Attendre un peu
sleep 3

echo ""
echo "3Ô∏è‚É£  √âTAPE 3: Simulation des actions"
echo "====================================="

# Simuler les actions (normalement on ferait √ßa avec des vrais clics)
simulate_actions "HOST" 2
simulate_actions "CLIENT" 3

# Laisser tourner un moment pour voir les interactions
echo ""
echo "4Ô∏è‚É£  √âTAPE 4: Observation (10 secondes)"
echo "======================================"
sleep 10

# Analyser les logs
echo ""
echo "5Ô∏è‚É£  √âTAPE 5: Analyse des logs"
echo "============================="

echo ""
echo "üîç ANALYSE DU HOST ($HOST_LOG):"
echo "------------------------------"
if [ -f "$HOST_LOG" ]; then
    echo "üìä Lignes de log: $(wc -l < "$HOST_LOG")"
    
    echo ""
    echo "üè† Messages de d√©marrage host:"
    grep -i "host\|h√©berg\|server" "$HOST_LOG" | head -5
    
    echo ""
    echo "üì° Messages r√©seau (serveur):"
    grep -i "websocket\|server\|client\|connect" "$HOST_LOG" | head -5
    
    echo ""
    echo "üçΩÔ∏è  Messages d'aliments:"
    grep -i "aliment\|nourrir\|commande" "$HOST_LOG" | head -5
    
    echo ""
    echo "üìà Changements d'√©tat:"
    grep -i "√©tat\|faim\|soif\|humeur" "$HOST_LOG" | head -5
    
else
    echo "‚ùå Fichier de log host non trouv√©"
fi

echo ""
echo "üîç ANALYSE DU CLIENT ($CLIENT_LOG):"
echo "-----------------------------------"
if [ -f "$CLIENT_LOG" ]; then
    echo "üìä Lignes de log: $(wc -l < "$CLIENT_LOG")"
    
    echo ""
    echo "üîó Messages de connexion client:"
    grep -i "client\|rejoind\|connect" "$CLIENT_LOG" | head -5
    
    echo ""
    echo "üì§ Commandes envoy√©es:"
    grep -i "envoi\|command\|send" "$CLIENT_LOG" | head -5
    
    echo ""
    echo "üì• √âtats re√ßus:"
    grep -i "re√ßu\|received\|√©tat" "$CLIENT_LOG" | head -5
    
else
    echo "‚ùå Fichier de log client non trouv√©"
fi

# Analyser les probl√®mes potentiels
echo ""
echo "6Ô∏è‚É£  √âTAPE 6: Diagnostic des probl√®mes"
echo "===================================="

PROBLEMS_FOUND=0

# V√©rifier si le serveur a d√©marr√©
if [ -f "$HOST_LOG" ] && grep -q "serveur.*d√©marr√©\|server.*start" "$HOST_LOG"; then
    echo "‚úÖ Serveur d√©marr√© correctement"
else
    echo "‚ùå PROBL√àME: Serveur n'a pas d√©marr√©"
    PROBLEMS_FOUND=$((PROBLEMS_FOUND + 1))
fi

# V√©rifier si le client s'est connect√©
if [ -f "$CLIENT_LOG" ] && grep -q "connect√©\|connected" "$CLIENT_LOG"; then
    echo "‚úÖ Client connect√© correctement"
else
    echo "‚ùå PROBL√àME: Client ne s'est pas connect√©"
    PROBLEMS_FOUND=$((PROBLEMS_FOUND + 1))
fi

# V√©rifier les commandes d'aliments
if [ -f "$CLIENT_LOG" ] && grep -q "commande.*envoy√©e\|command.*sent" "$CLIENT_LOG"; then
    echo "‚úÖ Client envoie des commandes"
else
    echo "‚ö†Ô∏è  ATTENTION: Pas de commandes d'aliment d√©tect√©es du client"
    PROBLEMS_FOUND=$((PROBLEMS_FOUND + 1))
fi

# V√©rifier si l'h√¥te re√ßoit les commandes
if [ -f "$HOST_LOG" ] && grep -q "commande.*re√ßue\|command.*received" "$HOST_LOG"; then
    echo "‚úÖ H√¥te re√ßoit les commandes"
else
    echo "‚ùå PROBL√àME: H√¥te ne re√ßoit pas les commandes du client"
    PROBLEMS_FOUND=$((PROBLEMS_FOUND + 1))
fi

# V√©rifier la synchronisation d'√©tat
if [ -f "$HOST_LOG" ] && [ -f "$CLIENT_LOG" ]; then
    HOST_STATES=$(grep -c "diffusion\|broadcast" "$HOST_LOG")
    CLIENT_STATES=$(grep -c "√©tat.*re√ßu\|state.*received" "$CLIENT_LOG")
    
    echo "üìä Diffusions host: $HOST_STATES, R√©ceptions client: $CLIENT_STATES"
    
    if [ $HOST_STATES -gt 0 ] && [ $CLIENT_STATES -gt 0 ]; then
        echo "‚úÖ Synchronisation d'√©tat active"
    else
        echo "‚ùå PROBL√àME: Pas de synchronisation d'√©tat"
        PROBLEMS_FOUND=$((PROBLEMS_FOUND + 1))
    fi
fi

# Nettoyer
cleanup

echo ""
echo "7Ô∏è‚É£  R√âSUM√â DU DIAGNOSTIC"
echo "======================="

if [ $PROBLEMS_FOUND -eq 0 ]; then
    echo "‚úÖ SYST√àME SEMBLE FONCTIONNEL"
    echo "   Tous les composants de base fonctionnent"
    echo "   Le probl√®me pourrait √™tre dans l'interface utilisateur"
else
    echo "‚ùå $PROBLEMS_FOUND PROBL√àME(S) D√âTECT√â(S)"
    echo "   V√©rifiez les logs ci-dessus pour plus de d√©tails"
fi

echo ""
echo "üìã FICHIERS DE LOG G√âN√âR√âS:"
echo "   - $HOST_LOG (logs de l'h√¥te)"
echo "   - $CLIENT_LOG (logs du client)"
echo ""
echo "üí° Pour voir les logs complets:"
echo "   cat $HOST_LOG"
echo "   cat $CLIENT_LOG"

echo ""
echo "üîç === FIN DU DIAGNOSTIC ==="
