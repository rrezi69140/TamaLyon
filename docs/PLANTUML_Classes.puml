@startuml TamaLyon_Architecture_OOP

!theme aws-orange

title TamaLyon - Architecture Orientée Objet\nDiagramme de Classes

package "Aliments System" as AlimentsPackage {
    abstract class Aliment {
        # int faimImpact
        # int soifImpact  
        # int humeurImpact
        # bool estToxique
        # QString categorie
        # QString nom
        # QString emoji
        
        + QString getDescription() {abstract}
        + bool estAcceptePar(QString) {abstract}
        + int getEmpoisonnementLevel()
    }

    class Pomme {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class Pizza {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class Eau {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class Steak {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class ChampignonToxique {
        + QString getDescription()
        + bool estAcceptePar(QString)
        + int getEmpoisonnementLevel()
    }

    class Chocolat {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class Poisson {
        + QString getDescription()
        + bool estAcceptePar(QString)
    }

    class AlimentManager {
        - QList<Aliment*> m_aliments
        
        + QQmlListProperty<Aliment> alimentsDisponibles()
        + Aliment* getAlimentByIndex(int)
        + Aliment* getAlimentByName(QString)
        + int getAlimentCount()
        + QString getAlimentInfo(int)
        - void initializeAliments()
    }
}

package "Animals System" as AnimalsPackage {
    enum EtatAnimal {
        Normal
        Affame
        Assoiffe
        Triste
        Empoisonne
        Mort
    }

    abstract class Animal {
        # int faim
        # int soif
        # int humeur
        # int empoisonnement
        # bool estMort
        # QString nom
        # QString type
        # EtatAnimal etat
        # QTimer* timerDecroissance
        # QTimer* timerEmpoisonnement
        # EffectHandler* effectChain
        
        + void donnerAliment(Aliment*)
        + void resetAnimal()
        + void appliquerEffetFaim(int)
        + void appliquerEffetSoif(int)
        + void appliquerEffetHumeur(int)
        + void appliquerEffetEmpoisonnement(int)
        + void reagir(Aliment*) {abstract}
        + QString getReactionMessage(Aliment*) {abstract}
        + bool accepteAliment(Aliment*) {abstract}
        # void decroissance()
        # void verifierEtat()
        # void onEtatChanged(EtatAnimal) {virtual}
        # void onMort() {virtual}
    }

    class Lion {
        + void reagir(Aliment*)
        + QString getReactionMessage(Aliment*)
        + bool accepteAliment(Aliment*)
        # void onEtatChanged(EtatAnimal)
        # void onMort()
        - QString getReactionParCategorie(QString)
        - QString getReactionParEtat()
        - bool estCarnivorePrefere(QString)
    }
}

package "Effect Chain System" as EffectPackage {
    abstract class EffectHandler {
        - EffectHandler* nextHandler
        
        + void setNext(EffectHandler*)
        + void handleEffect(Animal*, Aliment*)
        # void processEffect(Animal*, Aliment*) {abstract}
        # QString getEffectName() {abstract}
    }

    class FaimHandler {
        # void processEffect(Animal*, Aliment*)
        # QString getEffectName()
    }

    class SoifHandler {
        # void processEffect(Animal*, Aliment*)
        # QString getEffectName()
    }

    class HumeurHandler {
        # void processEffect(Animal*, Aliment*)
        # QString getEffectName()
    }

    class EmpoisonnementHandler {
        # void processEffect(Animal*, Aliment*)
        # QString getEffectName()
    }
}

package "Network System" as NetworkPackage {
    class LionManager {
        - QString m_mood
        - QString m_connectionStatus
        - int hunger, thirst, affection, energy
        - WebSocketServer* server
        - WebSocketClient* client
        - bool isHost
        
        + void startAsHost()
        + void joinAsClient()
        + void sendCommand(QString)
        + bool isHostMode()
        - void broadcastState()
        - void onCommandReceived(QString)
        - void onStateReceived(QJsonObject)
    }

    class WebSocketServer {
        - QWebSocketServer* m_server
        - QSet<QWebSocket*> m_clients
        
        + void startServer(quint16)
        + void broadcastState(QJsonObject)
        - void onNewConnection()
        - void onMessageReceived(QString)
    }

    class WebSocketClient {
        - QWebSocket m_socket
        
        + void connectToServer(QUrl)
        + void sendCommand(QString)
        - void onConnected()
        - void onMessageReceived(QString)
    }
}

' Héritage des aliments
Aliment <|-- Pomme
Aliment <|-- Pizza
Aliment <|-- Eau
Aliment <|-- Steak
Aliment <|-- ChampignonToxique
Aliment <|-- Chocolat
Aliment <|-- Poisson

' Composition AlimentManager
AlimentManager *-- Aliment : manages

' Héritage des animaux
Animal <|-- Lion
Animal ..> EtatAnimal : uses

' Chain of Responsibility
EffectHandler <|-- FaimHandler
EffectHandler <|-- SoifHandler
EffectHandler <|-- HumeurHandler
EffectHandler <|-- EmpoisonnementHandler
EffectHandler --> EffectHandler : nextHandler

' Relations principales
Animal *-- EffectHandler : effectChain
Animal ..> Aliment : consumes
Lion ..> Aliment : reacts to

' Réseau
LionManager *-- WebSocketServer
LionManager *-- WebSocketClient

note top of Aliment : Design Pattern:\nTemplate Method\n+ Strategy Pattern
note top of Animal : Design Pattern:\nTemplate Method\n+ State Machine\n+ Observer (Qt Signals)
note top of EffectHandler : Design Pattern:\nChain of Responsibility
note top of LionManager : Design Pattern:\nFacade + Singleton-like

@enduml
